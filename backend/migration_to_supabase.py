import os
import json
from dotenv import load_dotenv
from supabase import create_client, Client
from sqlalchemy import create_engine, MetaData
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.ext.declarative import declarative_base
import datetime

# Load environment variables
load_dotenv()

# Initialize SQLAlchemy without Flask
engine = create_engine('sqlite:///backend/instance/ai_agent.db')
Session = sessionmaker(bind=engine)
Base = declarative_base()

# Reflect existing database structure
metadata = MetaData()
metadata.reflect(bind=engine)

def get_models():
    from models import User, Agent, Tool, Task, Conversation, Message
    return User, Agent, Tool, Task, Conversation, Message

def export_data():
    User, Agent, Tool, Task, Conversation, Message = get_models()
    model_map = {
        'user': User,
        'agent': Agent,
        'tool': Tool,
        'task': Task,
        'conversation': Conversation,
        'message': Message
    }
    session = Session()
    
    data = {}
    for table in metadata.tables.values():
        if table.name in model_map:
            model = model_map[table.name]
            data[table.name] = [
                {column.name: getattr(row, column.name).isoformat() 
                 if isinstance(getattr(row, column.name), datetime.datetime) 
                 else getattr(row, column.name) 
                 for column in table.columns} 
                for row in session.query(model).all()
            ]
    
    session.close()
    return data

# Initialize Supabase client
url: str = os.environ.get("SUPABASE_URL")
key: str = os.environ.get("SUPABASE_KEY")
supabase: Client = create_client(url, key)

def import_to_supabase(data):
    for table, records in data.items():
        if records:
            try:
                response = supabase.table(table).insert(records).execute()
                print(f"Inserted {len(records)} records into {table}")
                if response.data:
                    print(f"First record: {response.data[0]}")
            except Exception as e:
                print(f"Error inserting into {table}: {str(e)}")
                print(f"First record causing error: {records[0] if records else 'No records'}")

def create_supabase_tables():
    tables = {
        'user': '''
            CREATE TABLE IF NOT EXISTS "user" (
                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                email VARCHAR NOT NULL UNIQUE,
                password_hash VARCHAR NOT NULL,
                name VARCHAR
            );
        ''',
        'agent': '''
            CREATE TABLE IF NOT EXISTS agent (
                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                name VARCHAR NOT NULL,
                type VARCHAR NOT NULL,
                description VARCHAR
            );
        ''',
        'tool': '''
            CREATE TABLE IF NOT EXISTS tool (
                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                name VARCHAR NOT NULL,
                description VARCHAR,
                api_endpoint VARCHAR
            );
        ''',
        'task': '''
            CREATE TABLE IF NOT EXISTS task (
                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                user_id BIGINT NOT NULL,
                request VARCHAR NOT NULL,
                status VARCHAR,
                result TEXT,
                plan JSONB,
                mode VARCHAR
            );
        ''',
        'conversation': '''
            CREATE TABLE IF NOT EXISTS conversation (
                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                user_id BIGINT NOT NULL,
                title VARCHAR NOT NULL,
                date TIMESTAMP NOT NULL
            );
        ''',
        'message': '''
            CREATE TABLE IF NOT EXISTS message (
                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                conversation_id BIGINT NOT NULL,
                type VARCHAR NOT NULL,
                content TEXT NOT NULL,
                timestamp TIMESTAMP NOT NULL,
                steps JSONB
            );
        '''
    }

    for table_name, create_query in tables.items():
        try:
            # Check if the table exists
            supabase.table(table_name).select('id').limit(1).execute()
            print(f"Table {table_name} already exists.")
        except:
            # If the table doesn't exist, create it
            result = supabase.postgrest.rpc('execute_sql', {'query': create_query}).execute()
            print(f"Created table {table_name}")
            if result.data:
                print(f"Result: {result.data}")

if __name__ == "__main__":
    print("Creating Supabase tables...")
    create_supabase_tables()
    
    print("Starting data migration...")
    data = export_data()
    if data:
        import_to_supabase(data)
        print("Data migration completed.")
    else:
        print("No data to migrate.")